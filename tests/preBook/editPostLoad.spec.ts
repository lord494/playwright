import { test, expect, Page, Locator } from '@playwright/test';
import { Constants } from '../../helpers/constants';
import { PostLoadsPage } from '../../page/preBook/postLoads.page';
import { AddEditPostLoadPage } from '../../page/preBook/addEditPostLoad.page';
import { generateRandomString } from '../../helpers/dateUtilis';

test.use({ storageState: 'auth.json' });

let page: Page;

test.beforeEach(async ({ page }) => {
    const postLoad = new PostLoadsPage(page);
    const add = new AddEditPostLoadPage(page);
    const loadId = generateRandomString();
    await page.goto(Constants.postLoadPrebookUrl);
    await page.waitForLoadState('networkidle');
    await postLoad.newLoadButton.click();
    await add.saveButton.waitFor({ state: 'visible', timeout: 5000 });
    await add.enterLoadId(add.loadId, loadId);
    await add.selectOrigin(add.originMenu, Constants.deliveryCity, add.originOption);
    await add.selecDestination(add.destinatinMenu, Constants.seconDeliveryCity, add.destinationOption);
    await add.selectTodayDate(add.pickupDateField, add.todayDate);
    await add.selectTodayDate(add.deliveryDateField, add.todayDate.last());
    await add.selectCompany(add.companyField, add.companyOption);
    await add.enterBrokerName(add.brokerNameField, Constants.playWrightUser);
    await add.enterBrokerEmail(add.brokerEmailField, Constants.testEmail);
    await add.enterBrokerPhone(add.brokerPhoneField, Constants.phoneNumberOfUserApp);
    await add.enterWeight(add.weightField, Constants.weight);
    await add.enterRate(add.rateField, Constants.amount);
    await add.enterSyggestedRate(add.suggestedRateField, Constants.suggestedRate);
    await add.check(add.dedicaterCheckbox);
    await add.enterNote(add.noteField, Constants.noteFirst);
    await add.saveButton.click();
    await add.addEditDialogbox.waitFor({ state: 'detached', timeout: 5000 });
    await page.waitForLoadState('networkidle');
    await postLoad.loadIdSearchInputField.click();
    await page.waitForTimeout(100);
    for (const char of loadId) {
        await postLoad.loadIdSearchInputField.type(char);
        await page.waitForTimeout(300);
        await postLoad.loadIdSearchInputField.click();
    }
    const truckCell = page.locator(`tr:nth-child(1) td:nth-child(1):has-text("${loadId}")`);
    await truckCell.waitFor({ state: 'visible', timeout: 10000 });
    await expect(postLoad.loadIdColumn.first()).toContainText(loadId);
});

test('Korisnik moze da edituje post Load', async ({ page }) => {
    test.setTimeout(90_000);
    const postLoad = new PostLoadsPage(page);
    const add = new AddEditPostLoadPage(page);
    const loadId = generateRandomString();
    await postLoad.pencilIcon.click();
    await add.saveButton.last().waitFor({ state: 'visible', timeout: 5000 });
    await add.loadId.clear();
    await add.enterLoadId(add.loadId, loadId);
    await add.selectOrigin(add.originMenu, Constants.miamiOriginCity, add.miamiOption);
    await add.selecDestination(add.destinatinMenu, Constants.newYorkCity, add.newYorkOption);
    await add.selectTodayDate(add.pickupDateField, page.getByRole('button', { name: '20', exact: true }).locator('div').first());
    await add.selectTodayDate(add.deliveryDateField, page.getByRole('button', { name: '22', exact: true }).nth(1));
    await add.selectTime(add.pickupTimeField, add.hours, add.minutes);
    await add.selectTime(add.toPickupTimeField, add.secondHours, add.secondMinutes);
    await add.selectTime(add.deliveryTimeField, add.secondHours, add.secondMinutes);
    await add.selectTime(add.toDilevryTimeField, add.hours, add.minutes);
    await add.selectCompany(add.companyField, add.editTestCompanyOption);
    await add.brokerNameField.clear();
    await add.enterBrokerName(add.brokerNameField, Constants.appTestUser);
    await add.brokerEmailField.clear();
    await add.enterBrokerEmail(add.brokerEmailField, Constants.fndPlaywrightEmail);
    await add.brokerPhoneField.clear();
    await add.enterBrokerPhone(add.brokerPhoneField, Constants.secondPhone);
    await add.uncheck(add.dedicaterCheckbox);
    await add.noteField.clear();
    await add.enterNote(add.noteField, Constants.noteSecond);
    await add.saveButton.last().click();
    await add.addEditDialogbox.waitFor({ state: 'detached', timeout: 5000 });
    await page.waitForLoadState('networkidle');
    await postLoad.dateMenu.click();
    await page.getByRole('button', { name: '20', exact: true }).locator('div').first().click();
    await page.getByRole('button', { name: '22', exact: true }).locator('div').last().click();
    await postLoad.loadIdSearchInputField.click();
    await postLoad.loadIdSearchInputField.press('Control+A');
    await postLoad.loadIdSearchInputField.press('Backspace');
    await postLoad.loadIdSearchInputField.click();
    await page.waitForTimeout(100);
    for (const char of loadId) {
        await postLoad.loadIdSearchInputField.type(char);
        await page.waitForTimeout(300);
        await postLoad.loadIdSearchInputField.click();
    }
    const truckCell = page.locator(`tr:nth-child(1) td:nth-child(1):has-text("${loadId}")`);
    await truckCell.waitFor({ state: 'visible', timeout: 10000 });
    await expect(postLoad.loadIdColumn.first()).toContainText(loadId);
    await expect(postLoad.originColumn.first()).toContainText(Constants.miamiOriginCity);
    await expect(postLoad.destinationColumn.first()).toContainText(Constants.newYorkCity);
    await expect(postLoad.weightColumn.first()).toContainText(Constants.weight);
    await expect(postLoad.rateColumn.first()).toContainText(Constants.amount);
    await expect(postLoad.companyColumn.first()).toContainText(Constants.freighttincCompany);
    await expect(postLoad.contactPersonColumn.first()).toContainText(Constants.appTestUser);
    await expect(postLoad.emailColumn.first()).toContainText(Constants.fndPlaywrightEmail);
    await expect(postLoad.suggestedRateColumn.first()).toContainText(Constants.suggestedRate);
    await postLoad.noteIcon.hover();
    await expect(postLoad.noteIcon).toHaveAttribute('aria-expanded', 'true');
    const today = new Date();
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const year = today.getFullYear();
    await expect(postLoad.pickUpColumn.first()).toContainText(month + '/20/' + year + ' 03:40 - 15:30');
    await expect(postLoad.deliveryColumn.first()).toContainText(month + '/22/' + year + ' 15:30 - 03:40');
    await expect(postLoad.trailerTypeColumn).toContainText(Constants.firstTrailerType);
});